function [Log, InitialConditions] = whenJobIsFinished_v1(jh, varargin)

% CDW 20080117 - This function gets called when a job is finished, to process
%                the data from the tasks, return the data, and destroy the job.
% CDW 20080525 - Modified the fellow to generate a graph of each job and mail
%                that to me as well as a means of checking in on the progress of
%                running jobs and making sure everything is going well.


%% Old verision protection
%Uncomment this next line when a new ver is saved
%warning(['Running an old version of ' mfilename]) 


%% Process results

JobName = jh.name; %Keeps my mail notifications happy

if strcmp(jh.state, 'finished')
    Results = getAllOutputArguments(jh);
    destroy(jh);
%    clear jh
else %don't kill a job that isn't finished yet
    warning(['Job ' JobName ' aint finished yet']); %#ok<WNTAG>
    unix(['echo "Tried to exit job when not done. You should investigate" | /usr/bin/mail cdave@u.washington.edu -s ''Job error: ''' jh.name]);
    return
end

%get our data out of the G.D. cell array
[Log, InitialConditions] = unpackResults_v1(Results);

%% Make a little chart to help me understand the output
% %Choose a (semi-)random output
% RandRun = round(rand*size(Log.axial,3)/1);
% if ((size(Log.axial,3)-10)>RandRun)&&(RandRun>1) ~= 1,
%     RandRun = 1; %this assumes that there will always be at least ten runs in the job
%     if size(Log.axial,3)<11;
%         warning('DAVE:NOT_ENOUGH_RUNS', 'There are not enough runs in the current job to satisfy the graphing section');
%     end
% end
% %make a figure
% FigHandle = figure;
% hold on
% subplot(3,1,1);
% plot(Log.axial(:,1,RandRun));
% ylabel('Single Run');
% subplot(3,1,2);
% plot(mean(Log.axial(:,1,RandRun:RandRun+10),3));
% ylabel('Ten Runs');
% subplot(3,1,3);
% plot(mean(Log.axial(:,1,:),3));
% ylabel('All Runs');
% xlabel('Time');
% title(['Forces generated by ' jh.Name]);
% %save it
% [CodePath, DataPath] = getPaths_v1();
% FileName = [DataPath '/' jh.Name '.png'];
% print(FigHandle, '-dpng', FileName)


%% And save the file to its output
[CodePath, DataPath] = getPaths_v1(); %get our paths
%make a new directory for our data if need be
if ~isdir(DataPath)
  mkdir(DataPath); 
end

SaveName = [JobName '_' ... 
    num2str(InitialConditions.Runs) 'runs_' ...
    datestr(now, 'tHHMM')];

save([DataPath '/' SaveName '.mat'], 'Log', 'InitialConditions');

%% And save a small version thereof

Forces.axial = mean(Log.axial(:,1,:),3);
Forces.perp = mean(Log.perp(:,:,:),3);
if ~isdir([DataPath '/small/'])
  mkdir([DataPath '/small/']); 
end
save([DataPath '/small/' SaveName '.mat'], 'Forces', 'InitialConditions');

%% Make some text charts to email Dave
saveTextSummary([SaveName '.txt'], Log.axial(:,1,:));

%% Let me know about it

if isunix
  unix(['/usr/bin/mail cdave@u.washington.edu -s ''Job complete: ''' JobName ' < ' SaveName '.txt']);
  %unix(['echo "You should investigate" | /usr/bin/mail cdave@u.washington.edu -s ''Job done: ''' JobName]);
  %!/usr/bin/mail cdave@u.washington.edu -s 'Cluster job complete' < /home/cluster/thedrick/message.txt
  % !/usr/bin/nail -s 'Cluster job complete' -a FileName -q /home/cluster/dave/message.txt  cdave@u.washington.edu
end

%clean up the directory by deleting the text file
delete([SaveName '.txt']);